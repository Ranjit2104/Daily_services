Creating a software application like UrbanClap (now known as Urban Company) using Spring Boot (backend) and React (frontend) involves several key features such as user authentication, service booking, service categorization, admin management, etc. Below is a detailed step-by-step guide to create a basic version of such an application.


### **Overview of Features**:
1. **User Authentication**: Users will register and log in with roles such as **Customer** and **Admin**.
2. **Service Booking**: Customers can browse and book different services like **Electrician**, **Plumber**, etc.
3. **Service Management**: Admin can view and manage service bookings and provide services.
4. **React Frontend**: React is used for rendering dynamic content and managing the user interface.
5. **Spring Boot Backend**: Spring Boot serves as the backend, providing RESTful APIs for managing users, services, and bookings.

---

### **Steps to Develop the Application**:

1. **Backend with Spring Boot**:
    - **Create Entity Classes** for User, ServiceCategory, and ServiceRequest.
    - **Implement the Service Layer** for handling business logic.
    - **Create RESTful APIs** for frontend to interact with.
    - **Handle Authentication & Authorization** with JWT (JSON Web Tokens).
    
2. **Frontend with React**:
    - **Set Up the React App** using Create React App.
    - **Create Pages** for user registration, login, service booking, and viewing available services.
    - **Connect React with Spring Boot** via API calls.

---

### **Step 1: Backend - Spring Boot Setup**

#### 1.1 **Create Spring Boot Project**
You can use [Spring Initializr](https://start.spring.io/) to create the backend Spring Boot project with the following dependencies:
- Spring Web
- Spring Data JPA
- Spring Security (JWT authentication)
- Spring Boot DevTools
- H2 Database (or any database you prefer)
- Spring Security JWT (for handling authentication)
  
### 1.2 **Create Entity Classes**

#### `User` Entity
This entity will represent both **customers** and **admins**.

```java
import javax.persistence.*;

@Entity
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String username;
    private String password;
    private String role; // "USER" or "ADMIN"

    // Getters and Setters
}
```

#### `ServiceCategory` Entity (For categorizing services like Electrician, Plumber)

```java
import javax.persistence.*;
import java.util.List;

@Entity
public class ServiceCategory {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String name;

    @OneToMany(mappedBy = "category")
    private List<ServiceRequest> serviceRequests;

    // Getters and Setters
}
```

#### `ServiceRequest` Entity (For storing booked services)

```java
import javax.persistence.*;
import java.util.Date;

@Entity
public class ServiceRequest {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String description;
    private Date requestedAt;
    private boolean isCompleted;

    @ManyToOne
    @JoinColumn(name = "category_id")
    private ServiceCategory category;

    @ManyToOne
    @JoinColumn(name = "user_id")
    private User user;

    // Getters and Setters
}
```

#### Repositories

```java
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository<User, Long> {
    User findByUsername(String username);
}

public interface ServiceCategoryRepository extends JpaRepository<ServiceCategory, Long> {}

public interface ServiceRequestRepository extends JpaRepository<ServiceRequest, Long> {}
```

#### Service Layer

You can implement services like `UserService`, `ServiceCategoryService`, and `ServiceRequestService` to handle business logic such as saving users, fetching service categories, and handling service bookings.

### 1.3 **Create RESTful APIs**

#### `UserController` for Authentication

```java
import org.springframework.web.bind.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;

@RestController
@RequestMapping("/api/users")
public class UserController {

    @Autowired
    private UserService userService;

    @PostMapping("/register")
    public String registerUser(@RequestBody User user) {
        userService.saveUser(user);
        return "User registered successfully!";
    }

    @PostMapping("/login")
    public String loginUser(@RequestBody User user) {
        // Implement login logic (JWT)
        return "User logged in successfully!";
    }
}
```

#### `ServiceCategoryController` and `ServiceRequestController`

Create controllers to handle service category listings, service request creation, etc.

---

### **Step 2: Frontend - React Setup**

#### 2.1 **Set Up React Project**

Create a new React app using Create React App:
```bash
npx create-react-app urbanclap-react
cd urbanclap-react
npm start
```

#### 2.2 **Install Dependencies**

Install libraries like Axios for making API requests and React Router for routing between pages:
```bash
npm install axios react-router-dom
```

#### 2.3 **Create React Components**

##### `RegisterPage.js`

```javascript
import React, { useState } from "react";
import axios from "axios";

function RegisterPage() {
    const [username, setUsername] = useState("");
    const [password, setPassword] = useState("");

    const handleSubmit = async (e) => {
        e.preventDefault();
        try {
            await axios.post("http://localhost:8080/api/users/register", { username, password });
            alert("User registered successfully!");
        } catch (error) {
            console.error("Error during registration", error);
        }
    };

    return (
        <div>
            <h2>Register</h2>
            <form onSubmit={handleSubmit}>
                <input 
                    type="text" 
                    placeholder="Username" 
                    value={username} 
                    onChange={(e) => setUsername(e.target.value)} 
                />
                <input 
                    type="password" 
                    placeholder="Password" 
                    value={password} 
                    onChange={(e) => setPassword(e.target.value)} 
                />
                <button type="submit">Register</button>
            </form>
        </div>
    );
}

export default RegisterPage;
```

##### `ServiceBookingPage.js`

```javascript
import React, { useState, useEffect } from "react";
import axios from "axios";

function ServiceBookingPage() {
    const [categories, setCategories] = useState([]);
    const [selectedCategory, setSelectedCategory] = useState(null);
    const [description, setDescription] = useState("");

    useEffect(() => {
        axios.get("http://localhost:8080/api/services")
            .then(response => {
                setCategories(response.data);
            })
            .catch(error => {
                console.error("Error fetching categories", error);
            });
    }, []);

    const handleBooking = () => {
        axios.post("http://localhost:8080/api/bookService", {
            description,
            categoryId: selectedCategory,
        })
        .then(response => {
            alert("Service booked successfully!");
        })
        .catch(error => {
            console.error("Error booking service", error);
        });
    };

    return (
        <div>
            <h2>Book a Service</h2>
            <select onChange={(e) => setSelectedCategory(e.target.value)}>
                {categories.map(category => (
                    <option key={category.id} value={category.id}>
                        {category.name}
                    </option>
                ))}
            </select>
            <textarea 
                value={description} 
                onChange={(e) => setDescription(e.target.value)} 
                placeholder="Describe your issue"
            />
            <button onClick={handleBooking}>Book Service</button>
        </div>
    );
}

export default ServiceBookingPage;
```

##### `App.js`

Use **React Router** to manage different pages (Registration, Login, Service Booking).

```javascript
import React from "react";
import { BrowserRouter as Router, Route, Switch } from "react-router-dom";
import RegisterPage from "./RegisterPage";
import ServiceBookingPage from "./ServiceBookingPage";

function App() {
    return (
        <Router>
            <Switch>
                <Route path="/register" component={RegisterPage} />
                <Route path="/book-service" component={ServiceBookingPage} />
            </Switch>
        </Router>
    );
}

export default App;
```

---

### **Step 3: Authentication with JWT**

You will need to implement **JWT-based authentication** in the backend for user login. When the user logs in successfully, the backend should generate a **JWT token** and send it to the frontend. The frontend will then store the token in **localStorage** and attach it to each subsequent request.

---

### **Step 4: Run the Application**

1. **Run the Spring Boot Backend**: Run the Spring Boot application on port `8080`.
2. **Run the React Frontend**: Run the React application on port `3000` using `npm start`.
3. **Access the App**: Open `http://localhost:3000/` in your browser to interact with the application.

---

### **Conclusion**

This application provides a basic version of **UrbanClap** using **Spring Boot** for the backend and **React** for the frontend. Key features implemented include:

- **User Registration and Login** with JWT authentication.
- **Service Booking** for customers.
- **Admin Panel** (you can expand it to view/manage bookings).

You can expand this project by adding more features such as **payment integration**, **service provider management**, **reviews and ratings**, etc.
	